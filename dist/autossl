#!/bin/bash

LOCAL_PATH="/etc/letsencrypt/live"
help () {
    echo '================================='
    echo '  ╔══╗╦  ╦╔═╦═╗╔══╗╔══╗╔══╗╦     '
    echo '  ╠══╣║  ║  ║  ║  ║╚══╗╚══╗║     '
    echo '  ╩  ╩╚══╝  ╩  ╚══╝╚══╝╚══╝╩══╝  '
    echo '  Version 1.0. TekuAsia © 2019  '
    echo '================================='
    echo ' Manage multiple site certificates with ease (support AWS IAM support)'
    echo ''
    echo ' autossl <email> <domains...>  Generate a site certificate'
    echo '         list              List all certificates'
    echo '         get <domain>      Get a domain certificate'
    echo '         renew             Renew all certificates'
    echo '         sync <provider>   Sync certificates to a provider. Provider list can be found at'
    echo '                           https://github.com/tekuasia/autossl#cloud-integration'
    echo '         help              Display help'
    echo '         init-aws          Init AWS'
    echo '         init-gcloud       Init Gcloud'
    echo '         init              Init installation'
}
install-apt () {
    if [ -n "$(command -v yum)" ]; then
        yum update -y
        yum install -y $@
    elif [ -n "$(command -v apt-get)" ]; then
        apt-get update -y
        apt-get install -y $@
    else
        echo "[ERROR] Can not install package"
        return 1
    fi
}
install-packages () {
    install-apt curl bc

    curl https://dl.eff.org/certbot-auto -O
    chmod 700 certbot-auto
    mv certbot-auto /usr/local/bin
}
has-command () {
    type "$1" 1>/dev/null 2>&1
}
has-certificates () {
    [ -d "$LOCAL_PATH/*/" ]
}
list-certs () {
    if [ has-certificates ]; then
        ls -ad1 $LOCAL_PATH/*/ | xargs -n 1 basename
    else
        echo "No certificates installed"
        exit 1
    fi
}
add-cert () {
    EMAIL="$1"
    shift
    certbot-auto certonly --no-eff-email --manual --preferred-challenges dns --server https://acme-v02.api.letsencrypt.org/directory --manual-public-ip-logging-ok --agree-tos --email "$EMAIL" ${@/#/-d }
}
get-cert () {
    SITE_NAME="$1"
    FILE_LIST="cert.pem privkey.pem chain.pem"

    if [ "$SITE_NAME" = "" ]; then
        echo "Please provide site name"
    elif [ ! -d "$LOCAL_PATH/$SITE_NAME" ]; then
        echo "Site not exists"
    else
        for cert_file in $FILE_LIST;
        do
            file_path="$LOCAL_PATH/$SITE_NAME/$cert_file"

            if [ -f $file_path ]; then
                echo "===================="
                echo " $cert_file "
                cat $file_path
            else
                echo "===================="
                echo " $cert_file: NOT EXISTS "
            fi
        done
    fi
}
get-cert-name () {
    DOMAIN="$1"
    CERT_FILE="/etc/letsencrypt/live/$DOMAIN/fullchain.pem"

    if [ ! -f $CERT_FILE ]; then
        echo "[ERROR] certificate file not found for domain $DOMAIN."
        return 1
    else
        echo "$(openssl x509 -in "/etc/letsencrypt/live/$DOMAIN/fullchain.pem" -text | grep "DNS" | sed -e "s/DNS://g" -e "s/ //g" -e "s/,/-/g" -e "s/*/+/g")"
    fi
}
check-cert () {
    DATE_NOW=$(date -d "now" +%s)
    DOMAIN="$1"
    CERT_FILE="/etc/letsencrypt/live/$DOMAIN/fullchain.pem"

    if [ ! -f $CERT_FILE ]; then
        echo "[ERROR] certificate file not found for domain $DOMAIN."
    else
        EXP_DATE=$(date -d "`openssl x509 -in $CERT_FILE -text -noout | grep "Not After" | cut -c 25-`" +%s)
        EXP_DAYS=$(echo \( $EXP_DATE - $DATE_NOW \) / 86400 |bc)

        if [[ "$EXP_DAYS" -gt "$EXP_LIMIT" ]]; then
            echo "valid"
        else
            echo "expired"
        fi
    fi
}
renew-all () {
    if [ ! has-certificates ]; then
        return 1
    fi

    for SITE_NAME in $(list-certs)
    do
        if [ "$(check-cert $SITE_NAME)" = "expired" ]; then
            certbot-auto renew --cert-name "$SITE_NAME"
        else
            echo "$SITE_NAME hasn't expired yet"
        fi
    done
}
sync-cert () {
    if [ ! has-certificates ]; then
        echo "No certificates installed"
    elif [ "$1" = "" ]; then
        echo "Please specify provider to sync"
    elif [ "$1" = "iam" ]; then
        echo "Importing certificates to AWS IAM, please don't cancel during this operation"
        
        if ! has-command aws; then
            install-aws
        fi

        iam-sync-cert
    elif [ "$1" = "acm" ]; then
        echo "Importing certificates to AWS ACM, please don't cancel during this operation"

        if ! has-command aws; then
            install-aws
        fi
        
        acm-sync-cert
    elif [ "$1" = "gcloud" ]; then
        echo "Importing certificates to Gcloud, please don't cancel during this operation"

        if ! has-command gcloud; then
            install-gcloud
        fi
        
        gcloud-sync-cert
    else
        echo "[ERROR] Not supported cloud provider: $1"
    fi
}
install-aws () {
    if [ -n "$(command -v yum)" ]; then
        yum install -y epel-release python36 python36-devel python36-setuptools
        easy_install-3.6 pip
    elif [ -n "$(command -v apt-get)" ]; then
        apt-get install python3-pip
    fi

    pip3 install awscli --upgrade --user
    ln ~/.local/bin/aws /usr/local/bin/aws

    # Add aws user for certbot with permissions:
    # iam:UploadServerCertificate
    # iam:DeleteServerCertificate
    aws configure
}
iam-sync-cert () {
    FILE_LIST="cert.pem privkey.pem chain.pem"
    DATE=`date '+%Y-%m'`
    SITES=$(list-certs)

    if [ "$SITES" == "" ]; then
        return
    fi

    for SITE_NAME in $SITES 
    do
        CERT_NAME="$(get-cert-name $SITE_NAME)-$DATE"
        echo "Importing certificates for site: $SITE_NAME  -->  $CERT_NAME"
        missing_certfile=0

        for cert_file in $FILE_LIST;
        do
            file_path="$LOCAL_PATH/$SITE_NAME/$cert_file"

            if [ ! -f $file_path ]; then
                echo " - Missing $cert_file"
                missing_certfile=1
            fi
        done

        if [ missing_certfile = 1 ]; then
            echo "[ERROR] Missing certificate file for $SITE_NAME"
            continue
        fi

        if [ "$CERT_NAME" = "" ]; then
            echo "[ERROR] Can't get cert name for $SITE_NAME"
            continue
        fi

        # Upload new certificate to IAM
        if aws iam upload-server-certificate \
            --server-certificate-name "$CERT_NAME" \
            --certificate-body "file:///$LOCAL_PATH/$SITE_NAME/cert.pem" \
            --private-key "file:///$LOCAL_PATH/$SITE_NAME/privkey.pem" \
            --certificate-chain "file:///$LOCAL_PATH/$SITE_NAME/chain.pem" 1>/dev/null; then
            echo "Created"
        fi
    done
}
acm-sync-cert () {
    FILE_LIST="cert.pem privkey.pem chain.pem"
    SITES=$(list-certs)

    if [ "$SITES" == "" ]; then
        return
    fi

    ACM_ARNS_STR=$(acm-list-cert-arns)
    declare -a ACM_ARNS=($ACM_ARNS_STR)
    declare -a ACM_NAMES=($(acm-list-cert-names "$ACM_ARNS_STR"))

    for SITE_NAME in $SITES 
    do
        CERT_NAME="$(get-cert-name $SITE_NAME)"
        echo "Importing certificates for site: $SITE_NAME  -->  $CERT_NAME"
        missing_certfile=0

        for cert_file in $FILE_LIST;
        do
            file_path="$LOCAL_PATH/$SITE_NAME/$cert_file"

            if [ ! -f $file_path ]; then
                echo " - Missing $cert_file"
                missing_certfile=1
            fi
        done

        if [ missing_certfile = 1 ]; then
            echo "[ERROR] Missing certificate file for $SITE_NAME"
            continue
        fi

        if [ "$CERT_NAME" = "" ]; then
            echo "[ERROR] Can't get cert name for $SITE_NAME"
            continue
        fi

        acm_arn=""
        for i in "${!ACM_NAMES[@]}"; do
            if [ "${ACM_NAMES[$i]}" = "$CERT_NAME" ]; then
                acm_arn="${ACM_ARNS[$i]}"
            fi
        done

        if [ "$acm_arn" = "" ]; then
            if aws acm import-certificate \
                --certificate "file:///$LOCAL_PATH/$SITE_NAME/cert.pem" \
                --private-key "file:///$LOCAL_PATH/$SITE_NAME/privkey.pem" \
                --certificate-chain "file:///$LOCAL_PATH/$SITE_NAME/chain.pem" 1>/dev/null; then
                echo "Created"
            fi
        else
            if aws acm import-certificate \
                --certificate-arn "$acm_arn" \
                --certificate "file:///$LOCAL_PATH/$SITE_NAME/cert.pem" \
                --private-key "file:///$LOCAL_PATH/$SITE_NAME/privkey.pem" \
                --certificate-chain "file:///$LOCAL_PATH/$SITE_NAME/chain.pem" 1>/dev/null; then
                echo "Updated"
            fi
        fi
    done
}
install-gcloud () {
    echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list && curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg  add - && apt-get update -y && apt-get install google-cloud-sdk -y

    gcloud init
}
gcloud-sync-cert () {
    FILE_LIST="cert.pem privkey.pem chain.pem"
    SITES=$(list-certs)
    DATE=`date '+%Y-%m'`

    if [ "$SITES" == "" ]; then
        return
    fi

    for SITE_NAME in $SITES 
    do
        CERT_NAME="$(get-cert-name $SITE_NAME | sed -e "s:\-:--:g" -e "s:\+\.:wc-:g" -e "s:\.:-:g")-$DATE"
        echo "Importing certificates for site: $SITE_NAME  -->  $CERT_NAME"
        missing_certfile=0

        for cert_file in $FILE_LIST;
        do
            file_path="$LOCAL_PATH/$SITE_NAME/$cert_file"

            if [ ! -f $file_path ]; then
                echo " - Missing $cert_file"
                missing_certfile=1
            fi
        done

        if [ missing_certfile = 1 ]; then
            echo "[ERROR] Missing certificate file for $SITE_NAME"
            continue
        fi

        if [ "$CERT_NAME" = "" ]; then
            echo "[ERROR] Can't get cert name for $SITE_NAME"
            continue
        fi

        # Upload new certificate to Gcloud
        if gcloud compute ssl-certificates create $CERT_NAME \
            --certificate "$LOCAL_PATH/$SITE_NAME/cert.pem" \
            --private-key "$LOCAL_PATH/$SITE_NAME/privkey.pem"; then
            echo "Created"
        fi
    done
}
MODE="$1"
EMAIL="$1"
DOMAINS=${@:2}

if [ "$MODE" = "help" ]; then
    help
elif [ "$MODE" = "renew" ]; then
    renew-all
elif [ "$MODE" = "list" ]; then
    list-certs
elif [ "$MODE" = "get" ]; then
    get-site "$2"
elif [ "$MODE" = "init" ]; then
    install-packages
elif [ "$MODE" = "init-aws" ]; then
    install-aws
elif [ "$MODE" = "init-gcloud" ]; then
    install-gcloud
elif [[ "$EMAIL" =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$ ]] && [[ "$DOMAINS" == *"."* ]]; then
    add-cert $@
    renew-all
elif [ "$MODE" = "sync" ]; then
    sync-cert "$2"
else
    echo "Invalid syntax. Please run --help"
    exit 1
fi

exit 0